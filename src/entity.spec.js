import test from 'ava'

import { Entity } from './entity'

test('entity:create', t => {
  t.throws(() => Entity.create(null))
  t.throws(() => Entity.create(undefined))
  const entity = Entity.create('CREATE')
  t.is(entity.source, null)
  t.is(entity.target, 'CREATE')
  t.is(entity.created, true)
  t.is(entity.updated, false)
  t.is(entity.deleted, false)
  t.is(entity.shouldCreate, true)
  t.is(entity.shouldUpdate, false)
  t.is(entity.shouldDelete, false)
  t.is(entity.shouldCommit, true)
})

test('entity:read', t => {
  const entity = Entity.read('READ')
  t.is(entity.source, 'READ')
  t.is(entity.target, 'READ')
  t.is(entity.created, false)
  t.is(entity.updated, false)
  t.is(entity.deleted, false)
  t.is(entity.shouldCreate, false)
  t.is(entity.shouldUpdate, false)
  t.is(entity.shouldDelete, false)
  t.is(entity.shouldCommit, false)
})

test('entity:update', t => {
  const entity = Entity.read('READ').update('UPDATE')
  t.is(entity.source, 'READ')
  t.is(entity.target, 'UPDATE')
  t.is(entity.created, false)
  t.is(entity.updated, true)
  t.is(entity.deleted, false)
  t.is(entity.shouldCreate, false)
  t.is(entity.shouldUpdate, true)
  t.is(entity.shouldDelete, false)
  t.is(entity.shouldCommit, true)
  t.throws(() => Entity.read('NULLIST').update(null))
  t.throws(() => Entity.read('NULLIST').update(undefined))
})

test('entity:null-update', t => {
  const entity = Entity.read('READ').update('READ')
  t.is(entity.source, 'READ')
  t.is(entity.target, 'READ')
  t.is(entity.created, false)
  t.is(entity.updated, false)
  t.is(entity.deleted, false)
  t.is(entity.shouldCreate, false)
  t.is(entity.shouldUpdate, false)
  t.is(entity.shouldDelete, false)
  t.is(entity.shouldCommit, false)
})

test('entity:delete', t => {
  const entity = Entity.read('READ').delete()
  t.is(entity.source, 'READ')
  t.is(entity.target, 'READ')
  t.is(entity.created, false)
  t.is(entity.updated, false)
  t.is(entity.deleted, true)
  t.is(entity.shouldCreate, false)
  t.is(entity.shouldUpdate, false)
  t.is(entity.shouldDelete, true)
  t.is(entity.shouldCommit, true)
})

test('entity:commit', t => {
  const entity = Entity.read('READ').update('UPDATE').commit()
  t.is(entity.source, 'UPDATE')
  t.is(entity.target, 'UPDATE')
  t.is(entity.created, false)
  t.is(entity.updated, false)
  t.is(entity.deleted, false)
  t.is(entity.shouldCreate, false)
  t.is(entity.shouldUpdate, false)
  t.is(entity.shouldDelete, false)
  t.is(entity.shouldCommit, false)
})

test('entity:set', t => {
  const entity = Entity.read('READ').set('UPDATE')
  t.is(entity.source, 'READ')
  t.is(entity.target, 'UPDATE')
  t.is(entity.created, false)
  t.is(entity.updated, false)
  t.is(entity.deleted, false)
  t.is(entity.shouldCreate, false)
  t.is(entity.shouldUpdate, false)
  t.is(entity.shouldDelete, false)
  t.is(entity.shouldCommit, false)
})
